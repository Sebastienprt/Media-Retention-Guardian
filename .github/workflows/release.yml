name: Build & Release Jellyfin Plugin

on:
  push:
    tags:
      - 'v*.*.*'   # Exemple: v0.1.0, v0.2.0
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer le code
      - uses: actions/checkout@v4

      # 2. Installer .NET
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3. Récupérer la version depuis le tag (ex: v0.2.0)
      - name: Extraire la version depuis le tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 4. Rendre le script packaging exécutable
      - name: Rendre le script exécutable
        run: chmod +x scripts/package.sh

      # 5. Construire le zip
      - name: Construire le plugin
        run: scripts/package.sh "${{ steps.version.outputs.version }}"

      # 6. Vérifier que les fichiers existent
      - name: Vérifier les fichiers générés
        run: ls -lh .

      # 7. Calculer le checksum
      - name: Calculer le checksum
        id: checksum
        run: |
          CHECKSUM=$(md5sum MediaRetentionGuardian_v${{ steps.version.outputs.version }}.zip | awk '{print $1}')
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT

      # 8. Mettre à jour le manifest.json
      - name: Mettre à jour manifest.json
        run: |
          jq --arg v "${{ steps.version.outputs.version }}" \
             --arg c "${{ steps.checksum.outputs.checksum }}" \
             '.[] |= .versions += [{
                "version": $v,
                "targetAbi": "10.10.0.0",
                "framework": "net8.0",
                "changelog": "- Release version " + $v,
                "sourceUrl": "https://github.com/${{ github.repository }}/releases/download/v\($v)/MediaRetentionGuardian_v\($v).zip",
                "thumb": "https://raw.githubusercontent.com/${{ github.repository }}/main/Jellyfin.Plugin.MediaRetentionGuardian/thumb.png",
                "checksum": $c
             }]' manifest.json > manifest.tmp && mv manifest.tmp manifest.json

      # 9. Publier les fichiers dans la Release
      - name: Publier dans la Release GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            MediaRetentionGuardian_v${{ steps.version.outputs.version }}.zip
            manifest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10. Vérifier les assets publiés
      - name: Vérifier les assets de la release
        run: |
          gh release view v${{ steps.version.outputs.version }} --json assets --jq '.assets[].name'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
